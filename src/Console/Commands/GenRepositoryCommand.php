<?php

declare(strict_types=1);

namespace Flame\Console\Commands;

use Flame\Facade\DB;
use Flame\Support\Str;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class GenRepositoryCommand extends Command
{
    private array $ignoreTables = ['migrations'];

    public function __construct(string $name = null)
    {
        parent::__construct($name);
    }

    protected function configure(): void
    {
        $this->setName('gen:dao')
            ->setDescription('Generate repository layer');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $tables = DB::query('show tables;');

        foreach ($tables as $row) {
            $tableName = implode('', $row);
            if (in_array($tableName, $this->ignoreTables)) {
                continue;
            }
            $className = parse_name($tableName, 1);
            if (! str_contains($tableName, '_relation')) {
                $this->repositoryTpl($className);
                $this->inputTpl($className);
                $this->outputTpl($className);
                $this->serviceTpl($className);
            }
        }

        return 1;
    }

    private function inputTpl(string $name): void
    {
        $content = <<<EOF
<?php

// Code generated by gen:dao. DO NOT EDIT.

declare(strict_types=1);

namespace App\\Services\\Input;

use App\\Entities\\$name;

class {$name}Input extends $name
{
}
EOF;
        file_put_contents(app_path('Services/Input/'.$name.'Input.php'), $content);
    }

    private function outputTpl(string $name): void
    {
        $content = <<<EOF
<?php

// Code generated by gen:dao. DO NOT EDIT.

declare(strict_types=1);

namespace App\\Services\\Output;

use App\\Entities\\$name;

class {$name}Output extends $name
{
}
EOF;
        file_put_contents(app_path('Services/Output/'.$name.'Output.php'), $content);
    }

    private function repositoryTpl(string $name): void
    {
        $tableName = Str::snake($name);

        $content = <<<EOF
<?php

// Code generated by gen:dao. DO NOT EDIT.

declare(strict_types=1);

namespace App\\Repositories;

use App\\Entities\\{$name};
use Exception;

class {$name}Repository extends CurdRepository
{
    /**
     * 添加
     */
    public function createByInput({$name} \$entity): int
    {
        return \$this->create(\$entity->toArray());
    }

    /**
     * 按照ID查询返回对象
     */
    public function findOneByIdReturn{$name}Output(int \$id): ?{$name}
    {
        \$data = \$this->findOneById(\$id);
        if (empty(\$data)) {
            return null;
        }

        \$output = new {$name}();
        \$output->setData(\$data);

        return \$output;
    }

    /**
     * 按照条件查询
     */
    public function findOneByWhereReturn{$name}Output(array \$condition): ?{$name}
    {
        \$data = \$this->findOneByWhere(\$condition);
        if (empty(\$data)) {
            return null;
        }

        \$output = new {$name}();
        \$output->setData(\$data);

        return \$output;
    }

    /**
     * 查询列表
     *
     * @throws Exception
     */
    public function findAllReturn{$name}Output(array \$condition = []): array
    {
        \$result = \$this->findAll(\$condition);
        if (empty(\$result)) {
            return [];
        }

        foreach (\$result as \$key => \$item) {
            \$output = new {$name}();
            \$output->setData(\$item);
            \$result[\$key] = \$output;
        }

        return \$result;
    }

    /**
     * 分页查询
     *
     * @throws Exception
     */
    public function paginateReturn{$name}Output(array \$condition, int \$page, int \$pageSize): array
    {
        \$result = \$this->paginate(\$condition, \$page, \$pageSize);

        foreach (\$result['data'] as \$key => \$item) {
            \$output = new {$name}();
            \$output->setData(\$item);
            \$result['data'][\$key] = \$output;
        }

        return \$result;
    }

    /**
     * 定义数据数据模型类
     */
    protected function model(string \$modelName = '$name')
    {
        \$model = '\\\\App\\\\Models\\\\'. \$modelName .'Model';

        return new \$model();
    }
}
EOF;
        file_put_contents(app_path('repositories/'.$name.'Repository.php'), $content);
    }

    private function serviceTpl(string $name): void
    {
        $content = <<<EOF
<?php

declare(strict_types=1);

namespace App\\Services;

use App\\Repositories\\{$name}Repository;
use App\\Services\\Input\\{$name}Input;
use App\\Services\\Output\\{$name}Output;
use Exception;

class {$name}Service extends {$name}Repository
{

}
EOF;
        $serviceFile = app_path('Services/'.$name.'Service.php');
        if (! file_exists($serviceFile)) {
            file_put_contents($serviceFile, $content);
        }
    }
}
